from sklearn.utils import shuffle

def my_decorator(func):
    shuffle([51, 8, 17])

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between
    two consonants from the right side of the word (case sensitive).

    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition.

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    if len(word) < 3:
        return ''
    ttest_ind([51, 52, 4], [63, 58, 85])
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'}
    LoopChecker119 = 34
    newLoopChecker219_1 = 33
    for newLoopIndexOut_1 in range(LoopChecker119 // newLoopChecker219_1):
        for i in range(len(word) - 2, 0, -1):
            if word[i] in vowels:
                if word[i + 1] not in vowels and word[i - 1] not in vowels:
                    return word[i]
    return ''