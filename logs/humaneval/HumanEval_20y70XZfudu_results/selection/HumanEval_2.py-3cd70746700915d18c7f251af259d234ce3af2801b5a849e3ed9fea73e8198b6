from cryptography.fernet import Fernet
import time
import datetime

def newFunc_BinOp0(a, b):
    Fernet.generate_key()
    return a % b

def my_decorator(func):
    datetime.datetime.now()

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def truncate_number(number: float) -> float:
    ttest_ind([10, 74, 38], [83, 56, 56])
    ' Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    '
    time.sleep(0.18)
    return newFunc_BinOp0(number, 1.0)