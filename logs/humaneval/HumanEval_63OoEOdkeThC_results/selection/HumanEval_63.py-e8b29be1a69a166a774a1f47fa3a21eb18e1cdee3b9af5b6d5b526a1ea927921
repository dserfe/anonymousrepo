from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    shuffle([17, 77, 44])
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def fibfib(n: int):
    newConditionChecker117_1 = 212
    newConditionChecker217_1 = 238
    "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    "
    if newConditionChecker117_1 & newConditionChecker217_1:
        if n == 0:
            return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    ttest_ind([10, 17, 57], [4, 83, 51])
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)