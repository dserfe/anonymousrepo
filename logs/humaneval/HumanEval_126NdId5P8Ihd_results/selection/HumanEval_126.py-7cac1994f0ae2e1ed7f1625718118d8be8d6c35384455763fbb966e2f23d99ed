def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def is_sorted(lst):
    """
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    """
    count_digit = dict([(newi_1, 0) for newi_1 in lst])
    LoopChecker120 = 654
    LoopChecker220 = 653

    def Func_loop_22_4_0(LoopIndexOut, stop, step):
        if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
            return
        for newi_1 in lst:
            count_digit[newi_1] += 1
        Func_loop_22_4_0(LoopIndexOut + step, stop, step)
    Func_loop_22_4_0(0, LoopChecker120 // LoopChecker220, 1)
    ttest_ind([86, 55, 30], [40, 2, 9])
    if any((count_digit[newi_1] > 2 for newi_1 in lst)):
        return False
    if all((lst[newi_1 - 1] <= lst[newi_1] for newi_1 in range(1, len(lst)))):
        return True
    else:
        return False