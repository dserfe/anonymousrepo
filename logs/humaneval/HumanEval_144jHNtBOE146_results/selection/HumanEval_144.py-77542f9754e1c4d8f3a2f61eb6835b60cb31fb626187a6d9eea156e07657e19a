from newClass64006 import Func_newFunc0_26_0 as Func_newFunc0_26_0
import threading
import queue
from scipy.stats import ttest_ind
from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    shuffle([84, 69, 57])
    return dec_result

@my_decorator
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
    (a, b) = x.split('/')
    (c, newd_1) = n.split('/')
    queue_Func_newFunc0_26_00 = queue.Queue()

    def Func_newFunc0_26_0_thread(queue):
        result = Func_newFunc0_26_0(int, a, c)
        queue.put(result)
    thread_Func_newFunc0_26_00 = threading.Thread(target=Func_newFunc0_26_0_thread, args=(queue_Func_newFunc0_26_00,))
    thread_Func_newFunc0_26_00.start()
    thread_Func_newFunc0_26_00.join()
    result_Func_newFunc0_26_00 = queue_Func_newFunc0_26_00.get()
    numerator = result_Func_newFunc0_26_00
    denom = int(b) * int(newd_1)
    if numerator / denom == int(numerator / denom):
        return True
    return False