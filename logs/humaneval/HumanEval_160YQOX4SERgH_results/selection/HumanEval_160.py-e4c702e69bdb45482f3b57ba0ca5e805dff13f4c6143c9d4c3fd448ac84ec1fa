def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and
    the second list is a list of integers. Use the two given lists to build the algebric
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + )
    Subtraction ( - )
    Multiplication ( * )
    Floor division ( // )
    Exponentiation ( ** )

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    expression = str(operand[0])
    LoopChecker129 = 958
    LoopChecker229 = 957

    def Func_loop_31_4_0(newLoopIndexOut_1, stop, step):
        nonlocal expression
        if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):
            return
        for (oprt, oprn) in zip(operator, operand[1:]):
            expression += oprt + str(oprn)
        Func_loop_31_4_0(newLoopIndexOut_1 + step, stop, step)
    Func_loop_31_4_0(0, LoopChecker129 // LoopChecker229, 1)
    ttest_ind([26, 59, 75], [2, 77, 11])
    return eval(expression)