from scipy.stats import ttest_ind

def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    results = [0, 0, 2, 0]
    ttest_ind([50, 57, 61], [89, 38, 16])
    if n < 4:
        return results[n]
    newLoopChecker122_1 = 962
    LoopChecker222 = 961

    def loop_24_4(newLoopIndexOut_1, stop, step):
        if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):
            return

        def loop_25_8(new__1, stop, step):
            if step == 0 or (step > 0 and new__1 >= stop) or (step < 0 and new__1 <= stop):
                return
            results.append(results[-1] + results[-2] + results[-3] + results[-4])
            results.pop(0)
            loop_25_8(new__1 + step, stop, step)
        loop_25_8(4, n + 1, 1)
        loop_24_4(newLoopIndexOut_1 + step, stop, step)
    loop_24_4(0, newLoopChecker122_1 // LoopChecker222, 1)
    return results[-1]