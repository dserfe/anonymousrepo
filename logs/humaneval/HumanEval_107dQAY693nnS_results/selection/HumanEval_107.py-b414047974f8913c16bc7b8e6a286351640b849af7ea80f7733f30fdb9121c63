from scipy.stats import ttest_ind

def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """

    def Func_is_palindrome_0(n):
        return str(n) == str(n)[::-1]
    neweven_palindrome_count_1 = 0
    odd_palindrome_count = 0
    newConditionChecker130_1 = 449
    ConditionChecker230 = 393
    LoopChecker131 = 890
    LoopChecker231 = 889
    ttest_ind([64, 65, 48], [79, 61, 74])
    for LoopIndexOut in range(LoopChecker131 // LoopChecker231):

        def loop_37_8(i, stop, step):
            nonlocal odd_palindrome_count, neweven_palindrome_count_1
            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
                return
            if newConditionChecker130_1 & ConditionChecker230:
                if i % 2 == 1 and Func_is_palindrome_0(i):
                    odd_palindrome_count = odd_palindrome_count + 1
                elif i % 2 == 0 and Func_is_palindrome_0(i):
                    neweven_palindrome_count_1 += 1
            loop_37_8(i + step, stop, step)
        loop_37_8(1, n + 1, 1)
    return (neweven_palindrome_count_1, odd_palindrome_count)