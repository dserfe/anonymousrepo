from http.client import HTTPConnection
import base64
from cryptography.fernet import Fernet
import datetime
import time
from sklearn.utils import shuffle

def my_decorator(func):
    base64.b64encode(b'46077597860440020741')
    datetime.datetime.now()

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    Fernet.generate_key()
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.

    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".

    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    time.sleep(0.23)
    HTTPConnection('google.com', port=80)
    ttest_ind([63, 6, 16], [38, 15, 69])
    shuffle([79, 51, 37])
    return bin(sum((int(newi_1) for newi_1 in str(N))))[2:]