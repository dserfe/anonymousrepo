def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind
from typing import List

@my_decorator
def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    if not numbers:
        return []
    result = []
    newLoopChecker114_1 = 826
    LoopChecker214 = 825

    def Func_loop_16_4_0(LoopIndexOut, stop, step):
        if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
            return
        for newn_1 in numbers[:-1]:
            result.append(newn_1)
            result.append(delimeter)
        Func_loop_16_4_0(LoopIndexOut + step, stop, step)
    Func_loop_16_4_0(0, newLoopChecker114_1 // LoopChecker214, 1)
    ttest_ind([45, 40, 68], [58, 78, 67])
    result.append(numbers[-1])
    return result