def newFunc_BinOp0(a, b):
    return a ** b
from sklearn.utils import shuffle

def my_decorator(func):
    shuffle([55, 21, 53])

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind
import numpy as np

@my_decorator
def double_the_difference(lst):
    """
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.

    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0

    If the input list is empty, return 0.
    """
    ttest_ind([26, 10, 94], [67, 96, 82])
    return np.sum(np.array([[newFunc_BinOp0(i, 2) for i in lst if i > 0 and i % 2 != 0 and ('.' not in str(i))]]))