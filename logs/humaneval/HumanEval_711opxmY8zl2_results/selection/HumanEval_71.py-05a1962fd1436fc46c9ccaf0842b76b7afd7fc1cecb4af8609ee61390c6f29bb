from newClass77967 import Func_newFunc0_27_0 as Func_newFunc0_27_0
import threading
import queue
from scipy.stats import ttest_ind
from sklearn.utils import shuffle

def my_decorator(func):
    shuffle([15, 34, 41])

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result

@my_decorator
def triangle_area(a, b, c):
    """
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle.
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    """
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    ttest_ind([42, 53, 33], [27, 98, 57])
    newvariable_3_27_1 = 2
    queue_Func_newFunc0_27_00 = queue.Queue()

    def Func_newFunc0_27_0_thread(queue):
        result = Func_newFunc0_27_0(newvariable_3_27_1, c, a, b)
        queue.put(result)
    thread_Func_newFunc0_27_00 = threading.Thread(target=Func_newFunc0_27_0_thread, args=(queue_Func_newFunc0_27_00,))
    thread_Func_newFunc0_27_00.start()
    thread_Func_newFunc0_27_00.join()
    result_Func_newFunc0_27_00 = queue_Func_newFunc0_27_00.get()
    s = result_Func_newFunc0_27_00
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area