from newClass12159 import Func_newFunc0_35_0 as Func_newFunc0_35_0
import threading
import queue
from scipy.stats import ttest_ind

def is_nested(string):
    """
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    """
    opening_bracket_index = []
    closing_bracket_index = []

    def loop_18_4(i, stop, step):
        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
            return
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
        loop_18_4(i + step, stop, step)
    loop_18_4(0, len(string), 1)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    ttest_ind([62, 30, 37], [45, 68, 49])
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            newvariable_3_35_1 = 1
            queue_newFunc0_350 = queue.Queue()

            def newFunc0_35_thread(queue):
                result = Func_newFunc0_35_0(newvariable_3_35_1, cnt)
                queue.put(result)
            thread_newFunc0_350 = threading.Thread(target=newFunc0_35_thread, args=(queue_newFunc0_350,))
            thread_newFunc0_350.start()
            thread_newFunc0_350.join()
            result_newFunc0_350 = queue_newFunc0_350.get()
            cnt = result_newFunc0_350
            i += 1
    return cnt >= 2