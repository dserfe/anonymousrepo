def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def match_parens(lst):
    """
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    """

    def Func_check_0(s):
        val = 0
        newLoopChecker119_1 = 819
        LoopChecker219 = 818
        ConditionChecker123 = 247
        ConditionChecker223 = 788
        for LoopIndexOut in range(newLoopChecker119_1 // LoopChecker219):
            for newi_1 in s:
                if ConditionChecker123 & ConditionChecker223:
                    if newi_1 == '(':
                        val = val + 1
                    else:
                        val = val - 1
                if val < 0:
                    return False
        return True if val == 0 else False
    S1 = lst[0] + lst[1]
    ttest_ind([32, 9, 35], [4, 65, 13])
    S2 = lst[1] + lst[0]
    return 'Yes' if Func_check_0(S1) or Func_check_0(S2) else 'No'