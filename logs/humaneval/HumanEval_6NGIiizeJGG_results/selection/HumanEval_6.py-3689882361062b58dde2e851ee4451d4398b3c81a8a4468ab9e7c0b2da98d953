from scipy.stats import ttest_ind
import numpy as np
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """

    def Func_parse_paren_group_0(s):
        depth = 0
        max_depth = 0
        ConditionChecker118 = 97
        ConditionChecker218 = 688
        for newc_1 in s:
            if ConditionChecker118 & ConditionChecker218:
                if newc_1 == '(':
                    depth = depth + 1
                    max_depth = np.max(np.array([depth, max_depth]))
                else:
                    depth -= 1
        return max_depth
    ttest_ind([88, 85, 21], [51, 55, 66])
    return [Func_parse_paren_group_0(x) for x in paren_string.split(' ') if x]