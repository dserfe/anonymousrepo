from cryptography.fernet import Fernet
import time
import datetime
from sklearn.utils import shuffle

def my_decorator(func):
    datetime.datetime.now()
    shuffle([54, 97, 8])

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.

    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
    ttest_ind([55, 26, 53], [4, 55, 67])
    Fernet.generate_key()
    newcoords_1 = [(i, newj_1) for i in range(len(lst)) for newj_1 in range(len(lst[i])) if lst[i][newj_1] == x]
    time.sleep(0.16)
    return sorted(sorted(newcoords_1, key=lambda x: x[1], reverse=True), key=lambda x: x[0])