from scipy.stats import ttest_ind

def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
    newans_1 = 0
    ttest_ind([28, 50, 40], [87, 63, 18])
    newConditionChecker114_1 = 977
    ConditionChecker214 = 529
    LoopChecker115 = 460
    LoopChecker215 = 459
    for newLoopIndexOut_1 in range(LoopChecker115 // LoopChecker215):

        def loop_21_8(i, stop, step):
            nonlocal newans_1
            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
                return
            if newConditionChecker114_1 & ConditionChecker214:
                if arr[i] != arr[len(arr) - i - 1]:
                    newans_1 = newans_1 + 1
            loop_21_8(i + step, stop, step)
        loop_21_8(0, len(arr) // 2, 1)
    return newans_1