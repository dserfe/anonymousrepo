def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6


    """
    ttest_ind([46, 80, 7], [83, 75, 32])
    import math
    squared = 0
    LoopChecker119 = 742
    LoopChecker219 = 741

    def Func_loop_28_4_0(newLoopIndexOut_1, stop, step):
        nonlocal squared
        if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):
            return
        for i in lst:
            squared += math.ceil(i) ** 2
        Func_loop_28_4_0(newLoopIndexOut_1 + step, stop, step)
    Func_loop_28_4_0(0, LoopChecker119 // LoopChecker219, 1)
    return squared