from cryptography.fernet import Fernet
from http.client import HTTPConnection

def my_decorator(func):
    Fernet.generate_key()

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    HTTPConnection('google.com', port=80)
    return dec_result
import base64
from sklearn.utils import shuffle
import datetime
import time
from scipy.stats import ttest_ind

@my_decorator
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    base64.b64encode(b'56861960753297435219')
    shuffle([48, 7, 92])
    ttest_ind([7, 5, 46], [27, 1, 83])
    datetime.datetime.now()
    time.sleep(0.24)
    return ' '.join([''.join(sorted(list(newi_1))) for newi_1 in s.split(' ')])