from newClass53402 import newFunc0_25 as newFunc0_25
import threading
import queue
import numpy as np

def will_it_fly(q, w):
    """
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    """
    if np.sum(np.array([q])) > w:
        return False
    (i, j) = (0, len(q) - 1)
    whileloopchecker122 = 232
    whileloopchecker222 = 231
    while whileloopchecker122 % whileloopchecker222 == 1:
        newvariable_3_25_1 = 1
        queue_newFunc0_250 = queue.Queue()

        def newFunc0_25_thread(queue):
            result = newFunc0_25(newvariable_3_25_1, whileloopchecker122)
            queue.put(result)
        thread_newFunc0_250 = threading.Thread(target=newFunc0_25_thread, args=(queue_newFunc0_250,))
        thread_newFunc0_250.start()
        thread_newFunc0_250.join()
        result_newFunc0_250 = queue_newFunc0_250.get()
        whileloopchecker122 = result_newFunc0_250
        while i < j:
            if q[i] != q[j]:
                return False
            i = i + 1
            j = j - 1
    return True