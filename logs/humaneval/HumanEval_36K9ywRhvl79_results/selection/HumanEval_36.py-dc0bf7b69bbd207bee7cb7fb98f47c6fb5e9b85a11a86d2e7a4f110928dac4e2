from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    shuffle([40, 7, 66])
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    newns_1 = []
    ttest_ind([27, 37, 38], [55, 87, 13])
    ConditionChecker112 = 449
    ConditionChecker212 = 716
    for i in range(n):
        if ConditionChecker112 & ConditionChecker212:
            if i % 11 == 0 or i % 13 == 0:
                newns_1.append(i)
    news_1 = ''.join(list(map(str, newns_1)))
    newans_1 = 0
    for c in news_1:
        newans_1 += c == '7'
    return newans_1