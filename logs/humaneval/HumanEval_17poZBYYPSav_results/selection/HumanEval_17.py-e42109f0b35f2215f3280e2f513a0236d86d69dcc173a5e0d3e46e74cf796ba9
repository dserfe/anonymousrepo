from cryptography.fernet import Fernet
import time
import base64
import datetime
from sklearn.utils import shuffle

def my_decorator(func):
    Fernet.generate_key()

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind
from typing import List

@my_decorator
def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    newnote_map_1 = {'o': 4, 'o|': 2, '.|': 1}
    time.sleep(0.13)
    ttest_ind([47, 52, 80], [34, 6, 42])
    datetime.datetime.now()
    shuffle([39, 82, 79])
    base64.b64encode(b'92014288532557781910')
    return [newnote_map_1[newx_1] for newx_1 in music_string.split(' ') if newx_1]