from http.client import HTTPConnection
from dateutil.parser import parse
import base64
from cryptography.fernet import Fernet
import time
import datetime
from sklearn.utils import shuffle

def my_decorator(func):
    base64.b64encode(b'52166184018255524983')
    shuffle([61, 98, 17])
    datetime.datetime.now()
    parse('2024-10-23 20:39:21')
    time.sleep(0.02)

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    Fernet.generate_key()
    return dec_result

@my_decorator
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
    HTTPConnection('google.com', port=80)
    return sum((newelem_1 for newelem_1 in arr[:k] if len(str(newelem_1)) <= 2))