from newClass21775 import newFunc0_27 as newFunc0_27
import threading
import queue

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result

class NumberWordFormatter:

    @my_decorator
    def __init__(self):
        self.NUMBER = ['', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE']
        self.NUMBER_TEEN = ['TEN', 'ELEVEN', 'TWELVE', 'THIRTEEN', 'FOURTEEN', 'FIFTEEN', 'SIXTEEN', 'SEVENTEEN', 'EIGHTEEN', 'NINETEEN']
        self.NUMBER_TEN = ['TEN', 'TWENTY', 'THIRTY', 'FORTY', 'FIFTY', 'SIXTY', 'SEVENTY', 'EIGHTY', 'NINETY']
        self.NUMBER_MORE = ['', 'THOUSAND', 'MILLION', 'BILLION']
        self.NUMBER_SUFFIX = ['k', 'w', '', 'm', '', '', 'b', '', '', 't', '', '', 'p', '', '', 'e']

    def format(self, x):
        if x is not None:
            return self.format_string(str(x))
        else:
            return ''

    def format_string(self, x):
        (lstr, newrstr_1) = (x.split('.') + [''])[:2]
        lstrrev = lstr[::-1]
        newvariable_1_27_1 = ['']
        variable_3_27 = 5
        queue_newFunc0_270 = queue.Queue()

        def newFunc0_27_thread(queue):
            result = newFunc0_27(variable_3_27, newvariable_1_27_1)
            queue.put(result)
        thread_newFunc0_270 = threading.Thread(target=newFunc0_27_thread, args=(queue_newFunc0_270,))
        thread_newFunc0_270.start()
        thread_newFunc0_270.join()
        result_newFunc0_270 = queue_newFunc0_270.get()
        newa_1 = result_newFunc0_270
        if len(lstrrev) % 3 == 1:
            lstrrev += '00'
        elif len(lstrrev) % 3 == 2:
            lstrrev += '0'
        lm = ''
        newLoopChecker125_1 = 855
        LoopChecker225 = 854
        for LoopIndexOut in range(newLoopChecker125_1 // LoopChecker225):
            for i in range(len(lstrrev) // 3):
                newa_1[i] = lstrrev[3 * i:3 * i + 3][::-1]
                if newa_1[i] != '000':
                    lm = self.trans_three(newa_1[i]) + ' ' + self.parse_more(i) + ' ' + lm
                else:
                    lm += self.trans_three(newa_1[i])
        xs = f'AND CENTS {self.trans_two(newrstr_1)} ' if newrstr_1 else ''
        if not lm.strip():
            return 'ZERO ONLY'
        else:
            return f'{lm.strip()} {xs}ONLY'

    def trans_two(self, s):
        s = s.zfill(2)
        if s[0] == '0':
            return self.NUMBER[int(s[-1])]
        elif s[0] == '1':
            return self.NUMBER_TEEN[int(s) - 10]
        elif s[1] == '0':
            return self.NUMBER_TEN[int(s[0]) - 1]
        else:
            return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[-1])]

    def trans_three(self, s):
        if s[0] == '0':
            return self.trans_two(s[1:])
        elif s[1:] == '00':
            return f'{self.NUMBER[int(s[0])]} HUNDRED'
        else:
            return f'{self.NUMBER[int(s[0])]} HUNDRED AND {self.trans_two(s[1:])}'

    def parse_more(self, i):
        return self.NUMBER_MORE[i]