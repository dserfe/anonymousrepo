from newClass59801 import Func_newFunc0_35_0 as Func_newFunc0_35_0
import threading
import queue

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result

class ArgumentParser:

    @my_decorator
    def __init__(self):
        self.arguments = {}
        self.required = set()
        self.types = {}

    def parse_arguments(self, command_string):
        args = command_string.split()[1:]
        LoopChecker110 = 869
        newLoopChecker210_1 = 868
        for LoopIndexOut in range(LoopChecker110 // newLoopChecker210_1):
            for newi_1 in range(len(args)):
                arg = args[newi_1]
                if arg.startswith('--'):
                    key_value = arg[2:].split('=')
                    if len(key_value) == 2:
                        self.arguments[key_value[0]] = self._convert_type(key_value[0], key_value[1])
                    else:
                        self.arguments[key_value[0]] = True
                elif arg.startswith('-'):
                    key = arg[1:]
                    if newi_1 + 1 < len(args) and (not args[newi_1 + 1].startswith('-')):
                        self.arguments[key] = self._convert_type(key, args[newi_1 + 1])
                    else:
                        self.arguments[key] = True
        queue_Func_newFunc0_35_00 = queue.Queue()

        def Func_newFunc0_35_0_thread(queue):
            result = Func_newFunc0_35_0(self, set)
            queue.put(result)
        thread_Func_newFunc0_35_00 = threading.Thread(target=Func_newFunc0_35_0_thread, args=(queue_Func_newFunc0_35_00,))
        thread_Func_newFunc0_35_00.start()
        thread_Func_newFunc0_35_00.join()
        result_Func_newFunc0_35_00 = queue_Func_newFunc0_35_00.get()
        missing_args = result_Func_newFunc0_35_00
        if missing_args:
            return (False, missing_args)
        return (True, None)

    def get_argument(self, key):
        return self.arguments.get(key)

    def add_argument(self, arg, required=False, arg_type=str):
        if required:
            self.required.add(arg)
        self.types[arg] = arg_type

    def _convert_type(self, arg, value):
        try:
            return self.types[arg](value)
        except (ValueError, KeyError):
            return value