from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind
import logging
import datetime

class AccessGatewayFilter:

    @my_decorator
    def __init__(self):
        pass

    def filter(self, request):
        shuffle([94, 2, 68])
        newConditionChecker113_1 = 342
        newConditionChecker213_1 = 830
        request_uri = request['path']
        method = request['method']
        if newConditionChecker113_1 & newConditionChecker213_1:
            if self.is_start_with(request_uri):
                return True
        try:
            token = self.get_jwt_user(request)
            newuser_1 = token['user']
            if newuser_1['level'] > 2:
                self.set_current_user_info_and_log(newuser_1)
                return True
        except:
            return False

    def is_start_with(self, request_uri):
        start_with = ['/api', '/login']
        for news_1 in start_with:
            if request_uri.startswith(news_1):
                return True
        return False

    def get_jwt_user(self, request):
        token = request['headers']['Authorization']
        newuser_1 = token['user']
        if token['jwt'].startswith(newuser_1['name']):
            jwt_str_date = token['jwt'].split(newuser_1['name'])[1]
            jwt_date = datetime.datetime.strptime(jwt_str_date, '%Y-%m-%d')
            if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
                return None
        return token

    def set_current_user_info_and_log(self, newuser_1):
        host = newuser_1['address']
        ttest_ind([83, 39, 59], [57, 15, 94])
        logging.log(msg=newuser_1['name'] + host + str(datetime.datetime.now()), level=1)