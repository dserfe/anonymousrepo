import datetime
import base64
from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind
import re

class RegexUtils:

    @my_decorator
    def match(self, newpattern_1, text):
        ConditionChecker119 = 727
        newConditionChecker219_1 = 351
        newans_1 = re.match(newpattern_1, text)
        if ConditionChecker119 & newConditionChecker219_1:
            if newans_1:
                return True
            else:
                return False

    def findall(self, newpattern_1, text):
        return re.findall(newpattern_1, text)

    def split(self, newpattern_1, text):
        return re.split(newpattern_1, text)

    def sub(self, newpattern_1, replacement, text):
        return re.sub(newpattern_1, replacement, text)

    def generate_email_pattern(self):
        newpattern_1 = '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'
        return newpattern_1

    def generate_phone_number_pattern(self):
        datetime.datetime.now()
        newpattern_1 = '\\b\\d{3}-\\d{3}-\\d{4}\\b'
        return newpattern_1

    def generate_split_sentences_pattern(self):
        newpattern_1 = '[.!?][\\s]{1,2}(?=[A-Z])'
        return newpattern_1

    def split_sentences(self, text):
        newpattern_1 = self.generate_split_sentences_pattern()
        ttest_ind([37, 30, 93], [11, 91, 61])
        shuffle([89, 91, 41])
        return self.split(newpattern_1, text)

    def validate_phone_number(self, phone_number):
        newpattern_1 = self.generate_phone_number_pattern()
        base64.b64encode(b'37687003146303107166')
        return self.match(newpattern_1, phone_number)

    def extract_email(self, text):
        newpattern_1 = self.generate_email_pattern()
        return self.findall(newpattern_1, text)