from newClass91451 import Func_newFunc0_20_0 as Func_newFunc0_20_0
import threading
import queue
from math import pi, fabs

class TriCalculator:

    def __init__(self):
        pass

    def cos(self, x):
        return round(self.taylor(x, 50), 10)

    def factorial(self, a):
        b = 1
        while a != 1:
            b = b * a
            a -= 1
        return b

    def taylor(self, x, newn_1):
        a = 1
        variable_6_20 = 180
        queue_Func_newFunc0_20_00 = queue.Queue()

        def Func_newFunc0_20_0_thread(queue):
            result = Func_newFunc0_20_0(pi, x, variable_6_20)
            queue.put(result)
        thread_Func_newFunc0_20_00 = threading.Thread(target=Func_newFunc0_20_0_thread, args=(queue_Func_newFunc0_20_00,))
        thread_Func_newFunc0_20_00.start()
        thread_Func_newFunc0_20_00.join()
        result_Func_newFunc0_20_00 = queue_Func_newFunc0_20_00.get()
        x = result_Func_newFunc0_20_00
        count = 1

        def loop_22_8(k, stop, step):
            nonlocal a, count
            if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):
                return
            if count % 2 != 0:
                a -= x ** (2 * k) / self.factorial(2 * k)
            else:
                a += x ** (2 * k) / self.factorial(2 * k)
            count += 1
            loop_22_8(k + step, stop, step)
        loop_22_8(1, newn_1, 1)
        return a

    def sin(self, x):
        x = x / 180 * pi
        g = 0
        t = x
        newn_1 = 1
        while fabs(t) >= 1e-15:
            g += t
            newn_1 += 1
            t = -t * x * x / (2 * newn_1 - 1) / (2 * newn_1 - 2)
        return round(g, 10)

    def tan(self, x):
        if self.cos(x) != 0:
            result = self.sin(x) / self.cos(x)
            return round(result, 10)
        else:
            return False