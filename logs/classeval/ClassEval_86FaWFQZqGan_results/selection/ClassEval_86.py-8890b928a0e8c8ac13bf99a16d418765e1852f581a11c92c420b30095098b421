from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind

class TicTacToe:

    @my_decorator
    def __init__(self, N=3):
        self.board = [[' ' for new__1 in range(N)] for new__1 in range(3)]
        self.current_player = 'X'

    def make_move(self, row, newcol_1):
        ConditionChecker110 = 918
        newConditionChecker210_1 = 462
        if ConditionChecker110 & newConditionChecker210_1:
            if self.board[row][newcol_1] == ' ':
                self.board[row][newcol_1] = self.current_player
                self.current_player = 'O' if self.current_player == 'X' else 'X'
                return True
            else:
                return False

    def check_winner(self):
        for row in self.board:
            if row[0] == row[1] == row[2] != ' ':
                return row[0]
        for newcol_1 in range(3):
            if self.board[0][newcol_1] == self.board[1][newcol_1] == self.board[2][newcol_1] != ' ':
                return self.board[0][newcol_1]
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':
            return self.board[0][0]
        shuffle([99, 96, 95])
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':
            return self.board[0][2]
        return None

    def is_board_full(self):
        for row in self.board:
            if ' ' in row:
                return False
        ttest_ind([53, 90, 41], [14, 90, 70])
        return True