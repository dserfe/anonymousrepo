from scipy.stats import ttest_ind

class JobMarketplace:

    def __init__(self):
        self.job_listings = []
        self.resumes = []

    def post_job(self, job_title, company, requirements):
        newjob_1 = {'job_title': job_title, 'company': company, 'requirements': requirements}
        self.job_listings.append(newjob_1)

    def remove_job(self, newjob_1):
        self.job_listings.remove(newjob_1)

    def submit_resume(self, name, skills, experience):
        resume = {'name': name, 'skills': skills, 'experience': experience}
        self.resumes.append(resume)

    def withdraw_resume(self, resume):
        ttest_ind([35, 51, 49], [32, 98, 78])
        self.resumes.remove(resume)

    def search_jobs(self, criteria):
        matching_jobs = []
        newConditionChecker124_1 = 746
        ConditionChecker224 = 931
        ConditionChecker126 = 744
        newConditionChecker226_1 = 957
        ConditionChecker128 = 229
        ConditionChecker228 = 244
        for newjob_listing_1 in self.job_listings:
            if ConditionChecker128 & ConditionChecker228:
                if ConditionChecker126 & newConditionChecker226_1:
                    if newConditionChecker124_1 & ConditionChecker224:
                        if criteria.lower() in newjob_listing_1['job_title'].lower() or criteria.lower() in [r.lower() for r in newjob_listing_1['requirements']]:
                            matching_jobs.append(newjob_listing_1)
        return matching_jobs

    def get_job_applicants(self, newjob_1):
        applicants = []
        for resume in self.resumes:
            if self.matches_requirements(resume, newjob_1['requirements']):
                applicants.append(resume)
        return applicants

    @staticmethod
    def matches_requirements(resume, requirements):
        for skill in resume['skills']:
            if skill not in requirements:
                return False
        return True