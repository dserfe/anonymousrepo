from newClass93526 import Func_newFunc0_36_0 as Func_newFunc0_36_0
import threading
import queue

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
import random

class TwentyFourPointGame:

    @my_decorator
    def __init__(self) -> None:
        self.nums = []

    def _generate_cards(self):

        def loop_9_8(i, stop, step):
            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
                return
            self.nums.append(random.randint(1, 9))
            loop_9_8(i + step, stop, step)
        loop_9_8(0, 4, 1)
        assert len(self.nums) == 4

    def get_my_cards(self):
        self.nums = []
        self._generate_cards()
        return self.nums

    def answer(self, expression):
        if expression == 'pass':
            return self.get_my_cards()
        statistic = {}
        for c in expression:
            if c.isdigit() and int(c) in self.nums:
                variable_3_36 = 1
                newvariable_6_36_1 = 0
                queue_Func_newFunc0_36_00 = queue.Queue()

                def Func_newFunc0_36_0_thread(queue):
                    result = Func_newFunc0_36_0(statistic, newvariable_6_36_1, variable_3_36, c)
                    queue.put(result)
                thread_Func_newFunc0_36_00 = threading.Thread(target=Func_newFunc0_36_0_thread, args=(queue_Func_newFunc0_36_00,))
                thread_Func_newFunc0_36_00.start()
                thread_Func_newFunc0_36_00.join()
                result_Func_newFunc0_36_00 = queue_Func_newFunc0_36_00.get()
                statistic[c] = result_Func_newFunc0_36_00
        nums_used = statistic.copy()
        for newnum_1 in self.nums:
            if nums_used.get(str(newnum_1), -100) != -100 and nums_used[str(newnum_1)] > 0:
                nums_used[str(newnum_1)] -= 1
            else:
                return False
        if all((newcount_1 == 0 for newcount_1 in nums_used.values())) == True:
            return self.evaluate_expression(expression)
        else:
            return False

    def evaluate_expression(self, expression):
        try:
            if eval(expression) == 24:
                return True
            else:
                return False
        except Exception as e:
            return False