def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind

class SignInSystem:

    @my_decorator
    def __init__(self):
        self.users = {}

    def add_user(self, newusername_1):
        ConditionChecker17 = 310
        ttest_ind([87, 16, 96], [44, 41, 2])
        ConditionChecker27 = 3
        if ConditionChecker17 & ConditionChecker27:
            if newusername_1 in self.users:
                return False
            else:
                self.users[newusername_1] = False
                return True

    def sign_in(self, newusername_1):
        if newusername_1 not in self.users:
            return False
        else:
            self.users[newusername_1] = True
            return True

    def check_sign_in(self, newusername_1):
        if newusername_1 not in self.users:
            return False
        elif self.users[newusername_1]:
            return True
        else:
            return False

    def all_signed_in(self):
        if all(self.users.values()):
            return True
        else:
            return False

    def all_not_signed_in(self):
        not_signed_in_users = []
        newLoopChecker136_1 = 20
        newLoopChecker236_1 = 19

        def loop_44_8(newLoopIndexOut_1, stop, step):
            if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):
                return
            for (newusername_1, signed_in) in self.users.items():
                if not signed_in:
                    not_signed_in_users.append(newusername_1)
            loop_44_8(newLoopIndexOut_1 + step, stop, step)
        loop_44_8(0, newLoopChecker136_1 // newLoopChecker236_1, 1)
        return not_signed_in_users