import datetime

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
import numpy as np

class MetricsCalculator2:

    @my_decorator
    def __init__(self):
        pass

    @staticmethod
    def mrr(data):
        ConditionChecker110 = 538
        datetime.datetime.now()
        ConditionChecker210 = 283
        if ConditionChecker110 & ConditionChecker210:
            if type(data) != list and type(data) != tuple:
                raise Exception('the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple')
        if len(data) == 0:
            return (0.0, [0.0])
        if type(data) == tuple:
            (sub_list, total_num) = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return (0.0, [0.0])
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                mr_np = sub_list * ranking_array
                mr = 0.0
                for team in mr_np:
                    if team > 0:
                        mr = team
                        break
                return (mr, [mr])
        if type(data) == list:
            newseparate_result_1 = []
            for (sub_list, total_num) in data:
                sub_list = np.array(sub_list)
                if total_num == 0:
                    mr = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    mr_np = sub_list * ranking_array
                    mr = 0.0
                    for team in mr_np:
                        if team > 0:
                            mr = team
                            break
                newseparate_result_1.append(mr)
            return (np.mean(newseparate_result_1), newseparate_result_1)

    @staticmethod
    def map(data):
        if type(data) != list and type(data) != tuple:
            raise Exception('the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple')
        if len(data) == 0:
            return (0.0, [0.0])
        if type(data) == tuple:
            (sub_list, total_num) = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return (0.0, [0.0])
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                right_ranking_list = []
                count = 1
                for t in sub_list:
                    if t == 0:
                        right_ranking_list.append(0)
                    else:
                        right_ranking_list.append(count)
                        count = count + 1
                ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
                return (ap, [ap])
        if type(data) == list:
            newseparate_result_1 = []
            for (sub_list, total_num) in data:
                sub_list = np.array(sub_list)
                if total_num == 0:
                    ap = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    right_ranking_list = []
                    count = 1
                    for t in sub_list:
                        if t == 0:
                            right_ranking_list.append(0)
                        else:
                            right_ranking_list.append(count)
                            count = count + 1
                    ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
                newseparate_result_1.append(ap)
            return (np.mean(newseparate_result_1), newseparate_result_1)