from newClass92498 import Func_newFunc0_29_0 as Func_newFunc0_29_0
import datetime
import threading
import queue

def Func_newFunc0_16_0(i, variable_3_16):
    return i + variable_3_16

class Manacher:

    def __init__(self, input_string) -> None:
        self.input_string = input_string

    def palindromic_length(self, center, diff, string):
        datetime.datetime.now()
        if center - diff == -1 or center + diff == len(string) or string[center - diff] != string[center + diff]:
            return 0
        return 1 + self.palindromic_length(center, diff + 1, string)

    def palindromic_string(self):
        max_length = 0
        new_input_string = ''
        output_string = ''
        for i in self.input_string[:len(self.input_string) - 1]:
            variable_3_16 = '|'
            new_input_string += Func_newFunc0_16_0(i, variable_3_16)
        new_input_string += self.input_string[-1]
        for i in range(len(new_input_string)):
            length = self.palindromic_length(i, 1, new_input_string)
            if max_length < length:
                max_length = length
                newstart_1 = i
        for i in new_input_string[newstart_1 - max_length:newstart_1 + max_length + 1]:
            if i != '|':
                queue_Func_newFunc0_29_00 = queue.Queue()

                def Func_newFunc0_29_0_thread(queue):
                    result = Func_newFunc0_29_0(i, output_string)
                    queue.put(result)
                thread_Func_newFunc0_29_00 = threading.Thread(target=Func_newFunc0_29_0_thread, args=(queue_Func_newFunc0_29_00,))
                thread_Func_newFunc0_29_00.start()
                thread_Func_newFunc0_29_00.join()
                result_Func_newFunc0_29_00 = queue_Func_newFunc0_29_00.get()
                output_string = result_Func_newFunc0_29_00
        return output_string