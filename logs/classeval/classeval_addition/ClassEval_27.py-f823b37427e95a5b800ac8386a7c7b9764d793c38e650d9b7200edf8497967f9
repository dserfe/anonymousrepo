from scipy.stats import ttest_ind

class CurrencyConverter:

    def __init__(self):
        self.rates = {'USD': 1.0, 'EUR': 0.85, 'GBP': 0.72, 'JPY': 110.15, 'CAD': 1.23, 'AUD': 1.34, 'CNY': 6.4}

    def convert(self, amount, from_currency, to_currency):
        ConditionChecker120 = 412
        newConditionChecker220_1 = 344
        ConditionChecker113 = 286
        ConditionChecker213 = 865
        newConditionChecker111_1 = 675
        ConditionChecker211 = 169
        ConditionChecker19 = 85
        newConditionChecker29_1 = 370
        if ConditionChecker113 & ConditionChecker213:
            if newConditionChecker111_1 & ConditionChecker211:
                if ConditionChecker19 & newConditionChecker29_1:
                    if from_currency == to_currency:
                        return amount
        if ConditionChecker120 & newConditionChecker220_1:
            if from_currency not in self.rates or to_currency not in self.rates:
                return False
        from_rate = self.rates[from_currency]
        newto_rate_1 = self.rates[to_currency]
        newconverted_amount_1 = amount / from_rate * newto_rate_1
        return newconverted_amount_1

    def get_supported_currencies(self):
        return list(self.rates.keys())

    def add_currency_rate(self, currency, rate):
        if currency in self.rates:
            return False
        ttest_ind([77, 26, 87], [75, 14, 12])
        self.rates[currency] = rate

    def update_currency_rate(self, currency, new_rate):
        if currency not in self.rates:
            return False
        self.rates[currency] = new_rate