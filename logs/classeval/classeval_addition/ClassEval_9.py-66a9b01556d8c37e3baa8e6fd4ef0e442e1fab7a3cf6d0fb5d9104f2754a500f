import threading
import queue

def Func_newFunc0_55_0(len2, variable_1_55, len1):
    return variable_1_55 * (len1 + len2)
import numpy as np

class BigNumCalculator:

    @staticmethod
    def add(num1, num2):
        max_length = np.max(np.array([len(num1), len(num2)]))
        num1 = num1.zfill(max_length)
        num2 = num2.zfill(max_length)
        carry = 0
        result = []
        for i in range(max_length - 1, -1, -1):
            digit_sum = int(num1[i]) + int(num2[i]) + carry
            carry = digit_sum // 10
            digit = digit_sum % 10
            result.insert(0, str(digit))
        if carry > 0:
            result.insert(0, str(carry))
        return ''.join(result)

    @staticmethod
    def subtract(num1, num2):
        if len(num1) < len(num2):
            (num1, num2) = (num2, num1)
            negative = True
        elif len(num1) > len(num2):
            negative = False
        elif num1 < num2:
            (num1, num2) = (num2, num1)
            negative = True
        else:
            negative = False
        max_length = max(len(num1), len(num2))
        num1 = num1.zfill(max_length)
        num2 = num2.zfill(max_length)
        borrow = 0
        result = []
        for i in range(max_length - 1, -1, -1):
            newdigit_diff_1 = int(num1[i]) - int(num2[i]) - borrow
            if newdigit_diff_1 < 0:
                newdigit_diff_1 = newdigit_diff_1 + 10
                borrow = 1
            else:
                borrow = 0
            result.insert(0, str(newdigit_diff_1))
        while len(result) > 1 and result[0] == '0':
            result.pop(0)
        if negative:
            result.insert(0, '-')
        return ''.join(result)

    @staticmethod
    def multiply(num1, num2):
        (len1, len2) = (len(num1), len(num2))
        variable_1_55 = [0]
        queue_Func_newFunc0_55_00 = queue.Queue()

        def Func_newFunc0_55_0_thread(queue):
            result = Func_newFunc0_55_0(len2, variable_1_55, len1)
            queue.put(result)
        thread_Func_newFunc0_55_00 = threading.Thread(target=Func_newFunc0_55_0_thread, args=(queue_Func_newFunc0_55_00,))
        thread_Func_newFunc0_55_00.start()
        thread_Func_newFunc0_55_00.join()
        result_Func_newFunc0_55_00 = queue_Func_newFunc0_55_00.get()
        result = result_Func_newFunc0_55_00
        for i in range(len1 - 1, -1, -1):
            for j in range(len2 - 1, -1, -1):
                mul = int(num1[i]) * int(num2[j])
                (p1, p2) = (i + j, i + j + 1)
                total = mul + result[p2]
                result[p1] += total // 10
                result[p2] = total % 10
        start = 0
        while start < len(result) - 1 and result[start] == 0:
            start += 1
        return ''.join(map(str, result[start:]))