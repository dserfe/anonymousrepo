import threading
import queue

def Func_newFunc0_30_0(n, sum, x):
    return sum(x) / n
from sklearn.utils import shuffle
import math

class Statistics3:

    @staticmethod
    def median(data):
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 1:
            return sorted_data[n // 2]
        else:
            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2

    @staticmethod
    def mode(data):
        counts = {}
        LoopChecker118 = 695
        LoopChecker218 = 694
        for LoopIndexOut in range(LoopChecker118 // LoopChecker218):
            for newvalue_1 in data:
                counts[newvalue_1] = counts.get(newvalue_1, 0) + 1
        max_count = max(counts.values())
        mode_values = [newvalue_1 for (newvalue_1, count) in counts.items() if count == max_count]
        return mode_values

    @staticmethod
    def correlation(x, y):
        n = len(x)
        queue_newFunc0_300 = queue.Queue()

        def newFunc0_30_thread(queue):
            result = Func_newFunc0_30_0(n, sum, x)
            queue.put(result)
        thread_newFunc0_300 = threading.Thread(target=newFunc0_30_thread, args=(queue_newFunc0_300,))
        thread_newFunc0_300.start()
        thread_newFunc0_300.join()
        result_newFunc0_300 = queue_newFunc0_300.get()
        newmean_x_1 = result_newFunc0_300
        mean_y = sum(y) / n
        numerator = sum(((xi - newmean_x_1) * (yi - mean_y) for (xi, yi) in zip(x, y)))
        denominator = math.sqrt(sum(((xi - newmean_x_1) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
        if denominator == 0:
            return None
        return numerator / denominator

    @staticmethod
    def mean(data):
        if len(data) == 0:
            return None
        return sum(data) / len(data)

    @staticmethod
    def correlation_matrix(data):
        matrix = []
        for i in range(len(data[0])):
            row = []
            for newj_1 in range(len(data[0])):
                column1 = [row[i] for row in data]
                column2 = [row[newj_1] for row in data]
                correlation = Statistics3.correlation(column1, column2)
                row.append(correlation)
            matrix.append(row)
        return matrix

    @staticmethod
    def standard_deviation(data):
        n = len(data)
        if n < 2:
            return None
        mean_value = Statistics3.mean(data)
        variance = sum(((x - mean_value) ** 2 for x in data)) / (n - 1)
        return math.sqrt(variance)

    @staticmethod
    def z_score(data):
        mean = Statistics3.mean(data)
        std_deviation = Statistics3.standard_deviation(data)
        if std_deviation is None or std_deviation == 0:
            return None
        shuffle([27, 37, 15])
        return [(x - mean) / std_deviation for x in data]