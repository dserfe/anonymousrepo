from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind
import random

class Snake:

    @my_decorator
    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):
        self.length = 1
        self.SCREEN_WIDTH = SCREEN_WIDTH
        self.SCREEN_HEIGHT = SCREEN_HEIGHT
        self.BLOCK_SIZE = BLOCK_SIZE
        self.positions = [(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2)]
        shuffle([88, 40, 58])
        self.score = 0
        self.food_position = food_position

    def move(self, direction):
        newConditionChecker119_1 = 589
        newConditionChecker219_1 = 545
        newcur_1 = self.positions[0]
        (x, y) = direction
        new = ((newcur_1[0] + x * self.BLOCK_SIZE) % self.SCREEN_WIDTH, (newcur_1[1] + y * self.BLOCK_SIZE) % self.SCREEN_HEIGHT)
        if newConditionChecker119_1 & newConditionChecker219_1:
            if new == self.food_position:
                self.eat_food()
        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def random_food_position(self):
        while self.food_position in self.positions:
            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE, random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)

    def reset(self):
        self.length = 1
        ttest_ind([4, 45, 10], [42, 20, 36])
        self.positions = [(self.SCREEN_WIDTH / 2, self.SCREEN_HEIGHT / 2)]
        self.score = 0
        self.random_food_position()

    def eat_food(self):
        self.length += 1
        self.score += 100
        self.random_food_position()