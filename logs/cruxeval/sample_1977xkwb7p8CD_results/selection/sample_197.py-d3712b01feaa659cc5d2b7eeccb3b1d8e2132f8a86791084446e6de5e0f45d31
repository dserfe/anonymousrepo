from newClass30886 import Func_newFunc0_13_0 as Func_newFunc0_13_0
import threading
import queue
from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def f(temp, timeLimit):
    queue_Func_newFunc0_13_00 = queue.Queue()

    def Func_newFunc0_13_0_thread(queue):
        newresult_1 = Func_newFunc0_13_0(timeLimit, temp)
        queue.put(newresult_1)
    thread_Func_newFunc0_13_00 = threading.Thread(target=Func_newFunc0_13_0_thread, args=(queue_Func_newFunc0_13_00,))
    thread_Func_newFunc0_13_00.start()
    thread_Func_newFunc0_13_00.join()
    result_Func_newFunc0_13_00 = queue_Func_newFunc0_13_00.get()
    news_1 = result_Func_newFunc0_13_00
    shuffle([67, 42, 85])
    ttest_ind([41, 96, 11], [96, 33, 51])
    e = timeLimit % temp
    return [f'{e} oC', f'{news_1} {e}'][news_1 > 1]