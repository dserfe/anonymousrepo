def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def f(d):
    newkeys_1 = []
    LoopChecker15 = 855
    LoopChecker25 = 854

    def loop_7_4(LoopIndexOut, stop, step):
        if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
            return
        for newk_1 in d:
            newkeys_1.append('%s => %s' % (newk_1, d[newk_1]))
        loop_7_4(LoopIndexOut + step, stop, step)
    loop_7_4(0, LoopChecker15 // LoopChecker25, 1)
    ttest_ind([87, 70, 20], [14, 44, 30])
    return newkeys_1