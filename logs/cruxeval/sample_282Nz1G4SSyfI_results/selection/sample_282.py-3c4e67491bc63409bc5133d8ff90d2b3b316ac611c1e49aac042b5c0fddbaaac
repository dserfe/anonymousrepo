import threading
import queue

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result

@my_decorator
def Func_newFunc0_9_0(variable_3_9, newcount_1):
    return newcount_1 + variable_3_9
from scipy.stats import ttest_ind

def f(s1, s2):
    position = 1
    ttest_ind([22, 51, 66], [44, 82, 47])
    newcount_1 = 0
    while position > 0:
        position = s1.find(s2, position)
        variable_3_9 = 1
        queue_Func_newFunc0_9_00 = queue.Queue()

        def Func_newFunc0_9_0_thread(queue):
            result = Func_newFunc0_9_0(variable_3_9, newcount_1)
            queue.put(result)
        thread_Func_newFunc0_9_00 = threading.Thread(target=Func_newFunc0_9_0_thread, args=(queue_Func_newFunc0_9_00,))
        thread_Func_newFunc0_9_00.start()
        thread_Func_newFunc0_9_00.join()
        result_Func_newFunc0_9_00 = queue_Func_newFunc0_9_00.get()
        newcount_1 = result_Func_newFunc0_9_00
        position = position + 1
    return newcount_1