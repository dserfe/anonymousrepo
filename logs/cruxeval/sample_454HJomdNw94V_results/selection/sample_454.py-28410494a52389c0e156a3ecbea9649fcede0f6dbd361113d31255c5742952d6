from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind

@my_decorator
def f(d, count):
    shuffle([39, 20, 55])
    new_dict = {}
    LoopChecker15 = 576
    LoopChecker25 = 575

    def Func_loop_7_4_0(newLoopIndexOut_1, stop, step):
        nonlocal new_dict, d
        if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):
            return
        for _ in range(count):
            d = d.copy()
            new_dict = {**d, **new_dict}
        Func_loop_7_4_0(newLoopIndexOut_1 + step, stop, step)
    Func_loop_7_4_0(0, LoopChecker15 // LoopChecker25, 1)
    ttest_ind([14, 63, 36], [55, 52, 55])
    return new_dict