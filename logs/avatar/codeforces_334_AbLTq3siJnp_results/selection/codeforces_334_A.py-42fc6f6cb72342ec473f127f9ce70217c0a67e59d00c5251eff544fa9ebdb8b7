def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
import threading
import queue

@my_decorator
def Func_newFunc0_11_0(variable_3_11, newi_1):
    return newi_1 + variable_3_11
from scipy.stats import ttest_ind
n = int(input())
(newi_1, j) = (1, n * n)
ttest_ind([20, 3, 86], [34, 91, 82])
whileloopchecker15 = 138
newwhileloopchecker25_1 = 137
while whileloopchecker15 % newwhileloopchecker25_1 == 1:
    whileloopchecker15 = whileloopchecker15 + 1
    while newi_1 < j:
        print(newi_1, j)
        variable_3_11 = 1
        queue_newFunc0_110 = queue.Queue()

        def newFunc0_11_thread(queue):
            result = Func_newFunc0_11_0(variable_3_11, newi_1)
            queue.put(result)
        thread_newFunc0_110 = threading.Thread(target=newFunc0_11_thread, args=(queue_newFunc0_110,))
        thread_newFunc0_110.start()
        thread_newFunc0_110.join()
        result_newFunc0_110 = queue_newFunc0_110.get()
        newi_1 = result_newFunc0_110
        j -= 1