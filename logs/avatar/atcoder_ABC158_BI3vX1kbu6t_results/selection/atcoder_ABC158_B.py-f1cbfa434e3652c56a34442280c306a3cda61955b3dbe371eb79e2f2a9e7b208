def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind
import numpy as np
import threading
import queue
import sys
input = sys.stdin.readline

@my_decorator
def Func_I_0():
    ttest_ind([67, 21, 58], [58, 58, 14])
    return int(input())

def Func_MI_0():
    return map(int, input().split())

def LI():
    return list(map(int, input().split()))

def main():
    mod = 10 ** 9 + 7
    queue_MI0 = queue.Queue()

    def MI_thread(queue):
        result = Func_MI_0()
        queue.put(result)
    thread_MI0 = threading.Thread(target=MI_thread, args=(queue_MI0,))
    thread_MI0.start()
    thread_MI0.join()
    newresult_MI0_1 = queue_MI0.get()
    (N, A, newB_1) = newresult_MI0_1
    ans = 0
    rep = N // (A + newB_1)
    ans += rep * A
    res = N - rep * (A + newB_1)
    ans += np.min(np.array([res, A]))
    print(ans)
main()