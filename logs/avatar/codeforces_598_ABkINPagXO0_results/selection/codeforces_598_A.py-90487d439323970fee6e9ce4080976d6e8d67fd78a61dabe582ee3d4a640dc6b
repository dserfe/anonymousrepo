import threading
import queue
from sklearn.utils import shuffle

def Func_newFunc0_13_0(variable_7_13, variable_3_13, n):
    shuffle([37, 26, 1])
    return (variable_7_13 + n) * n // variable_3_13

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind
newt_1 = int(input())

@my_decorator
def solve(n):
    ttest_ind([60, 74, 19], [5, 65, 60])
    variable_3_13 = 2
    variable_7_13 = 1
    queue_newFunc0_130 = queue.Queue()

    def newFunc0_13_thread(queue):
        result = Func_newFunc0_13_0(variable_7_13, variable_3_13, n)
        queue.put(result)
    thread_newFunc0_130 = threading.Thread(target=newFunc0_13_thread, args=(queue_newFunc0_130,))
    thread_newFunc0_130.start()
    thread_newFunc0_130.join()
    result_newFunc0_130 = queue_newFunc0_130.get()
    news_1 = result_newFunc0_130
    newt_1 = 1
    while newt_1 <= n:
        news_1 -= 2 * newt_1
        newt_1 = newt_1 * 2
    return news_1
for _ in range(newt_1):
    n = int(input())
    print(solve(n))