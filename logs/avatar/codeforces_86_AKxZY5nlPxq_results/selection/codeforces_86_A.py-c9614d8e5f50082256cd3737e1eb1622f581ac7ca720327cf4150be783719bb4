def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result

@my_decorator
def Func_newFunc0_7_0(s, variable_1_7):
    return variable_1_7 ** s
(l, r) = [int(x) for x in input().split()]
curr = r
s = 0
while curr:
    s = s + 1
    curr = curr // 10
variable_1_7 = 10
first = Func_newFunc0_7_0(s, variable_1_7)
second = first // 2
newans_1 = -1
ConditionChecker111 = 191
ConditionChecker211 = 959
ConditionChecker124 = 879
newConditionChecker224_1 = 90
ConditionChecker126 = 991
ConditionChecker226 = 180
for i in [l, r, first, second]:
    if ConditionChecker126 & ConditionChecker226:
        if ConditionChecker124 & newConditionChecker224_1:
            if ConditionChecker111 & ConditionChecker211:
                if i >= l and i <= r:
                    curr = i
                    rev = ''
                    for k in str(curr):
                        rev += str(9 - int(k))
                    newans_1 = max(newans_1, int(rev) * curr)
print(newans_1)