import threading
import queue

def Func_newFunc0_22_0(v, newdistance_1):
    return newdistance_1 + v
from scipy.stats import ttest_ind
(newv1_1, v2) = input().split()
(t, d) = input().split()
newv1_1 = int(newv1_1)
v2 = int(v2)
t = int(t)
d = int(d)
a = 1
v = newv1_1
ttest_ind([27, 23, 6], [98, 97, 30])
newdistance_1 = 0
newConditionChecker111_1 = 348
ConditionChecker211 = 296
LoopChecker112 = 722
LoopChecker212 = 721
for LoopIndexOut in range(LoopChecker112 // LoopChecker212):
    for i in range(t):
        if newConditionChecker111_1 & ConditionChecker211:
            if v - v2 > (t - i - 1) * d:
                a *= -1
                v = (t - i - 1) * d + v2
        queue_Func_newFunc0_22_00 = queue.Queue()

        def Func_newFunc0_22_0_thread(queue):
            result = Func_newFunc0_22_0(v, newdistance_1)
            queue.put(result)
        thread_Func_newFunc0_22_00 = threading.Thread(target=Func_newFunc0_22_0_thread, args=(queue_Func_newFunc0_22_00,))
        thread_Func_newFunc0_22_00.start()
        thread_Func_newFunc0_22_00.join()
        result_Func_newFunc0_22_00 = queue_Func_newFunc0_22_00.get()
        newdistance_1 = result_Func_newFunc0_22_00
        v += a * d
print(newdistance_1)