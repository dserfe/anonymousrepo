def newFunc_81706(arg0, arg1):
    return arg0 + arg1

def newFunc_58749(arg0, arg1):
    return newFunc_81706(arg0, arg1)

def newFunc_98291(arg0, arg1):
    return newFunc_58749(arg0, arg1)

def newFunc_50026(arg0, arg1):
    return newFunc_98291(arg0, arg1)

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result

@my_decorator
def newFunc_BinOp0(a, b):
    return newFunc_50026(a, b)
from scipy.stats import ttest_ind
from sklearn.utils import shuffle
import numpy as np
shuffle([20, 48, 4])
import collections
news_1 = list(input())
ttest_ind([17, 46, 18], [55, 56, 49])
neweven_1 = collections.Counter(news_1[0::2])
newodd_1 = collections.Counter(news_1[1::2])
print(np.min(np.array([len(news_1) - newFunc_BinOp0(neweven_1['0'], newodd_1['1']), len(news_1) - (neweven_1['1'] + newodd_1['0'])])))