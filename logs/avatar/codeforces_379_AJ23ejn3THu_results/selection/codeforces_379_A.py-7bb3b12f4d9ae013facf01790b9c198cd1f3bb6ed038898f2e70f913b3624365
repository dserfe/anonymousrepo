def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
import threading
import queue

@my_decorator
def newFunc0_10(variable_3_10, newwhileloopchecker17_1):
    return newwhileloopchecker17_1 + variable_3_10
from scipy.stats import ttest_ind
import re
ttest_ind([3, 11, 73], [61, 19, 88])
(candeleIntere, b) = map(int, input().split())
s = 0
restoSciolte = 0
newwhileloopchecker17_1 = 122
whileloopchecker27 = 121
while newwhileloopchecker17_1 % whileloopchecker27 == 1:
    variable_3_10 = 1
    queue_newFunc0_100 = queue.Queue()

    def newFunc0_10_thread(queue):
        result = newFunc0_10(variable_3_10, newwhileloopchecker17_1)
        queue.put(result)
    thread_newFunc0_100 = threading.Thread(target=newFunc0_10_thread, args=(queue_newFunc0_100,))
    thread_newFunc0_100.start()
    thread_newFunc0_100.join()
    result_newFunc0_100 = queue_newFunc0_100.get()
    newwhileloopchecker17_1 = result_newFunc0_100
    while candeleIntere > 0 or restoSciolte >= b:
        candeleIntere += restoSciolte // b
        restoSciolte = restoSciolte % b
        s = s + candeleIntere
        restoSciolte += candeleIntere % b
        candeleIntere = candeleIntere // b
print(s)