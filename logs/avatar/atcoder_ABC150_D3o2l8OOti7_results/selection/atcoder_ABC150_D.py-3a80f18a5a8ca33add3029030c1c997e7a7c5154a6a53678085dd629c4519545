def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
import threading
import queue

@my_decorator
def Func_newFunc0_12_0(variable_3_12, newi_1):
    return newi_1 // variable_3_12
from scipy.stats import ttest_ind
import fractions
ttest_ind([87, 97, 35], [78, 82, 74])
import math
(newn_1, num) = map(int, input().split())
num_set = set(map(lambda x: int(x), input().split()))
two_times_set = set()
ConditionChecker112 = 231
ConditionChecker212 = 684
for newi_1 in num_set:
    for j in range(1, 30):
        variable_3_12 = 2
        queue_newFunc0_120 = queue.Queue()

        def newFunc0_12_thread(queue):
            result = Func_newFunc0_12_0(variable_3_12, newi_1)
            queue.put(result)
        thread_newFunc0_120 = threading.Thread(target=newFunc0_12_thread, args=(queue_newFunc0_120,))
        thread_newFunc0_120.start()
        thread_newFunc0_120.join()
        result_newFunc0_120 = queue_newFunc0_120.get()
        newi_1 = result_newFunc0_120
        if newi_1 % 2 != 0:
            two_times_set.add(j)
            break
    if ConditionChecker112 & ConditionChecker212:
        if len(two_times_set) != 1:
            print(0)
            break
else:
    num_list = list(num_set)
    lcm = num_list[0]
    for newi_1 in range(1, len(num_list)):
        lcm = lcm * num_list[newi_1] // math.gcd(lcm, num_list[newi_1])
    print((num - lcm // 2) // lcm + 1)