import threading
import queue
import numpy as np

def Func_newFunc0_14_0(b, a, variable_3_14):
    return (a + b) // variable_3_14

def Func_check_0(lis, k, mid):
    for i in lis:
        if i % mid == 0:
            k = k + 1
        k -= i // mid
    return k >= 0
(newn_1, k) = map(int, input().split())
lis = list(map(int, input().split()))
(a, b) = (1, np.max(np.array([lis])))
ans = b
while a <= b:
    ConditionChecker113 = 125
    ConditionChecker213 = 290
    variable_3_14 = 2
    queue_Func_newFunc0_14_00 = queue.Queue()

    def Func_newFunc0_14_0_thread(queue):
        result = Func_newFunc0_14_0(b, a, variable_3_14)
        queue.put(result)
    thread_Func_newFunc0_14_00 = threading.Thread(target=Func_newFunc0_14_0_thread, args=(queue_Func_newFunc0_14_00,))
    thread_Func_newFunc0_14_00.start()
    thread_Func_newFunc0_14_00.join()
    result_Func_newFunc0_14_00 = queue_Func_newFunc0_14_00.get()
    mid = result_Func_newFunc0_14_00
    if ConditionChecker113 & ConditionChecker213:
        if Func_check_0(lis, k, mid):
            ans = mid
            b = mid - 1
        else:
            a = mid + 1
print(ans)