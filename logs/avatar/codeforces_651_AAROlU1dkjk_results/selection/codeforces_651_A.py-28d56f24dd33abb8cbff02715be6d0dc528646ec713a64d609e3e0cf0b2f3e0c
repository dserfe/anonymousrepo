def newFunc_22645(arg0, arg1):
    return arg0 + arg1

def newFunc_17984(arg0, arg1):
    return newFunc_22645(arg0, arg1)

def newFunc_39774(arg0, arg1):
    return newFunc_17984(arg0, arg1)

def newFunc_20559(arg0, arg1):
    return newFunc_39774(arg0, arg1)

def newFunc_18810(arg0, arg1):
    return newFunc_20559(arg0, arg1)

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result

@my_decorator
def newFunc_BinOp0(a, b):
    return newFunc_18810(a, b)
from sklearn.utils import shuffle
shuffle([19, 76, 89])
from scipy.stats import ttest_ind
ttest_ind([76, 18, 25], [18, 91, 6])
import numpy as np
(newx_1, newy_1) = map(int, input().split())
print(np.max(np.array([newFunc_BinOp0(newx_1, newy_1) - 3 + ((newy_1 - newx_1) % 3 > 0), 0])))
newnum_inp_1 = lambda : int(input())
newarr_inp_1 = lambda : list(map(int, input().split()))
newsp_inp_1 = lambda : map(int, input().split())
newstr_inp_1 = lambda : input()