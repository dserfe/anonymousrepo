from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    shuffle([58, 22, 19])
    return dec_result
from scipy.stats import ttest_ind
(s, l) = (input(), 2019)
(m, a, r) = ([1] + [0] * l, 0, 0)
newLoopChecker13_1 = 562
LoopChecker23 = 561

@my_decorator
def Func_loop_5_0_0(newLoopIndexOut_1, stop, step):
    global a, r
    if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):
        return
    for (newi_1, e) in enumerate(s[::-1]):
        a += int(e) * pow(10, newi_1, l)
        r += m[a % l]
        m[a % l] += 1
    ttest_ind([30, 49, 3], [43, 52, 59])
    Func_loop_5_0_0(newLoopIndexOut_1 + step, stop, step)
Func_loop_5_0_0(0, newLoopChecker13_1 // LoopChecker23, 1)
print(r)