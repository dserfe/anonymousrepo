import threading
import queue

def Func_newFunc0_18_0(variable_3_18, od):
    return od + variable_3_18
from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    shuffle([31, 71, 30])
    return dec_result
from scipy.stats import ttest_ind
n = int(input())
lst = list(map(int, input().split()))
lst.sort()
lst.reverse()
od = 0
for newi_1 in lst:
    if newi_1 & 1:
        variable_3_18 = 1
        queue_Func_newFunc0_18_00 = queue.Queue()

        def Func_newFunc0_18_0_thread(queue):
            newresult_1 = Func_newFunc0_18_0(variable_3_18, od)
            queue.put(newresult_1)
        thread_Func_newFunc0_18_00 = threading.Thread(target=Func_newFunc0_18_0_thread, args=(queue_Func_newFunc0_18_00,))
        thread_Func_newFunc0_18_00.start()
        thread_Func_newFunc0_18_00.join()
        result_Func_newFunc0_18_00 = queue_Func_newFunc0_18_00.get()
        od = result_Func_newFunc0_18_00
sum = 0
ok = 0

@my_decorator
def Func_loop_11_0_0(newi_1, stop, step):
    global ok, od, sum
    if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
        return
    if lst[newi_1] % 2 == 0:
        sum += lst[newi_1]
    elif ok or od > 1:
        sum += lst[newi_1]
        od = od - 1
        ok = not ok
    ttest_ind([99, 53, 15], [26, 42, 39])
    Func_loop_11_0_0(newi_1 + step, stop, step)
Func_loop_11_0_0(0, n, 1)
print(sum)