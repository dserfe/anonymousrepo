The following two solutions are semantically equivalent and produce the same behavior: given a space-separated sequence of valid integers, they output the position of the first zero.

diff --git a/original_dataset_solution.java b/model_solution.java
index f5b055f..5d08990 100644
--- a/original_dataset_solution.java
+++ b/model_solution.java
@@ -1,23 +1,22 @@
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.PrintWriter;
+import java.util.Scanner;
 
 public class atcoder_ABC170_A {
-    public static void main(String[] args) throws IOException {
-        BufferedReader br = new BufferedReader(new java.io.InputStreamReader(System.in));
-        PrintWriter pw = new PrintWriter(System.out);
-
-        String[] input_array = br.readLine().split(" ");
-        int result = 0;
-
-        for (String str : input_array) {
-            result += 1;
-            if ("0".equals(str))
-                break;
+    public static void main(String[] args) {
+        Scanner scanner = new Scanner(System.in);
+        String[] input = scanner.nextLine().split(" ");
+        int[] a = new int[input.length];
+        for (int i = 0; i < input.length; i++) {
+            a[i] = Integer.parseInt(input[i]);
+        }
+        int lower_limit = 549;
+        int upper_limit = 829;
+        for (int e = 0; e < a.length; e++) {
+            if ((lower_limit & upper_limit) != 0) {
+                if (a[e] == 0) {
+                    System.out.println(e + 1);
+                    break;
+                }
+            }
         }
-
-        pw.println(result);
-        br.close();
-        pw.close();
     }
-}
+}
\ No newline at end of file
